{"version":3,"sources":["App.js","index.js"],"names":["App","useState","data","set_data","get_banks_data","_","a","fetch","response","json","get_bank_data","comp_code","url","useEffect","TableBody","props","banks","banks_data","Array","map","el","index","id","compensation_code","inst_name","institution_name","invalid_bank","colSpan","className","type","onKeyUp","event","keyCode","preventDefault","target","nextSibling","click","onClick","previousSibling","value","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAyIeA,MArIf,WAEI,MAAyBC,qBAAzB,mBAAOC,EAAP,KAAaC,EAAb,KAIMC,EAAc,uCAAG,WAAMC,GAAN,eAAAC,EAAA,4DACP,iDADO,SAIEC,MAHT,kDADO,cAIfC,EAJe,gBAKFA,EAASC,OALP,OAKnBD,EALmB,OAMnBL,EAASK,GANU,2CAAH,sDAUdE,EAAa,uCAAG,WAAMC,GAAN,iBAAAL,EAAA,6DACZM,EADY,wDAC2CD,GAD3C,SAIGJ,MAAMK,GAJT,cAIdJ,EAJc,gBAKDA,EAASC,OALR,OAKlBD,EALkB,OAMlBL,EAASK,GANS,2CAAH,sDAUnBK,qBAAU,WACNT,MACD,IAGH,IAAMU,EAAY,SAAAC,GAGd,IAGIC,EAHEC,EAAaF,EAAME,WAIzB,GAAIA,GAAcA,aAAsBC,MACpCF,EAAQC,GAAcA,EAAWE,KAAI,SAACC,EAAIC,GACtC,IAAMC,EAAKF,EAAGE,GACRX,EAAYS,EAAGG,kBACfC,EAAYJ,EAAGK,iBAErB,OACI,+BACI,6BAAKH,IACL,6BAAKX,IACL,6BAAKa,MAHAH,WAShB,GAAIJ,GAAcA,EAAWS,aAC9BV,EACI,6BACI,oBAAIW,QAAQ,IAAZ,SAAiBV,EAAWS,sBAMpC,GAAIT,EAAY,CACZ,IAAMK,EAAKL,EAAWK,GAChBX,EAAYM,EAAWM,kBACvBC,EAAYP,EAAWQ,iBAE7BT,EACI,+BACI,6BAAKM,IACL,6BAAKX,IACL,6BAAKa,MAHD,KASpB,OAAO,gCAAQR,KA0BnB,OACI,gCAEI,oBAAIY,UAAU,QAAd,yBAEA,sBAAKA,UAAU,aAAf,UACI,mBAAGA,UAAU,cAAb,sDACA,uBAAOC,KAAK,SAASD,UAAU,eAAeE,QAvB1D,SAAuBC,GACG,KAAlBA,EAAMC,UACND,EAAME,iBACNF,EAAMG,OAAOC,YAAYC,YAqBrB,wBAAQR,UAAU,gBAAgBS,QA9B9C,SAAqBN,GACjB,IAAMpB,EAAYoB,EAAMG,OAAOI,gBAAgBC,MAC/C5B,EAAU6B,OAAS,EAAI9B,EAAcC,GAAaP,KA4B1C,oBACA,wBAAQwB,UAAU,YAAYS,QAjB1C,SAAyBN,GACrBA,EAAME,iBACiBF,EAAMG,OAAOI,gBACnBA,gBAAgBC,MAAQ,GACzCnC,KAaQ,8BAGJ,qBAAKwB,UAAU,kBAAf,SACI,wBAAOA,UAAU,QAAjB,UACI,gCACI,+BACI,oCACA,mDACA,uDAGR,cAACd,EAAD,CAAWG,WAAYf,aC7H3CuC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.1e634186.chunk.js","sourcesContent":["import './App.css';\r\nimport React, { useState, useEffect } from 'react'\r\n\r\n\r\nfunction App() {\r\n    // Declaring a hook to store the fetched data\r\n    const [data, set_data] = useState()\r\n\r\n\r\n    // Function to fetch api data\r\n    const get_banks_data = async _ => {\r\n        const url = 'https://revgas.herokuapp.com/revgas/api/banks/'\r\n        // const url = 'http://127.0.0.1:8000/revgas/api/banks/'\r\n\r\n        let response = await fetch(url)\r\n        response = await response.json()\r\n        set_data(response)\r\n    }\r\n\r\n    // Function to fetch the api data with a parameter\r\n    const get_bank_data = async comp_code => {\r\n        const url = `https://revgas.herokuapp.com/revgas/api/banks/${comp_code}`\r\n        // const url = `http://127.0.0.1:8000/revgas/api/banks/${comp_code}`\r\n\r\n        let response = await fetch(url)\r\n        response = await response.json()\r\n        set_data(response)\r\n    }\r\n\r\n    // Calling a function after the rendering phase\r\n    useEffect(() => {\r\n        get_banks_data()\r\n    }, [])\r\n\r\n    // Main component\r\n    const TableBody = props => {\r\n\r\n        // All bank data as props\r\n        const banks_data = props.banks_data\r\n\r\n        // Mapping the data fetched and storing it in a variable to render later\r\n        let banks\r\n        if (banks_data && banks_data instanceof Array) {\r\n            banks = banks_data && banks_data.map((el, index) => {\r\n                const id = el.id\r\n                const comp_code = el.compensation_code\r\n                const inst_name = el.institution_name\r\n\r\n                return (\r\n                    <tr key={index}>\r\n                        <td>{id}</td>\r\n                        <td>{comp_code}</td>\r\n                        <td>{inst_name}</td>\r\n                    </tr>\r\n                )\r\n            })\r\n        }\r\n        // Checking if the response has an error attribute\r\n        else if (banks_data && banks_data.invalid_bank) {\r\n            banks = (\r\n                <tr>\r\n                    <td colSpan=\"3\">{banks_data.invalid_bank}</td>\r\n                </tr>\r\n            )\r\n        }\r\n        // Saving a single bank data into an object\r\n        else {\r\n            if (banks_data) {\r\n                const id = banks_data.id\r\n                const comp_code = banks_data.compensation_code\r\n                const inst_name = banks_data.institution_name\r\n\r\n                banks = (\r\n                    <tr key=\"1\">\r\n                        <td>{id}</td>\r\n                        <td>{comp_code}</td>\r\n                        <td>{inst_name}</td>\r\n                    </tr>\r\n                )\r\n            }\r\n        }\r\n\r\n        return <tbody>{banks}</tbody>\r\n    }\r\n\r\n    // Function that will be executed when the user clicks on the \"search\" button\r\n    function search_bank(event) {\r\n        const comp_code = event.target.previousSibling.value\r\n        comp_code.length > 0 ? get_bank_data(comp_code) : get_banks_data()\r\n    }\r\n\r\n    // Binding the \"return\" key to trigger the \"search_bank\" function\r\n    function search_button(event) {\r\n        if (event.keyCode === 13) {\r\n            event.preventDefault()\r\n            event.target.nextSibling.click()\r\n        }\r\n    }\r\n\r\n    // Cleaning the input field and fetching the api when the \"Get all banks\" is pressed\r\n    function fetch_all_banks(event) {\r\n        event.preventDefault()\r\n        let previous_sibling = event.target.previousSibling\r\n        previous_sibling.previousSibling.value = ''\r\n        get_banks_data()\r\n    }\r\n\r\n    // Final Front end\r\n    return (\r\n        <div>\r\n\r\n            <h1 className=\"title\">Banks Index</h1>\r\n\r\n            <div className=\"search-box\">\r\n                <p className=\"search-text\">Search a bank by it's Compensation Code:</p>\r\n                <input type=\"number\" className=\"search-input\" onKeyUp={search_button} />\r\n                <button className=\"look-for-bank\" onClick={search_bank}>Search</button>\r\n                <button className=\"all-banks\" onClick={fetch_all_banks}>Get all banks</button>\r\n            </div>\r\n\r\n            <div className=\"table-container\">\r\n                <table className=\"table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Id</th>\r\n                            <th>Compensation Code</th>\r\n                            <th>Institution name</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <TableBody banks_data={data} />\r\n                </table>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}