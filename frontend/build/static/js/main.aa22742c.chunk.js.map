{"version":3,"sources":["App.js","index.js"],"names":["App","_","useState","data","set_data","loading","set_loading","get_banks_data","a","fetch","response","json","console","log","get_bank_data","comp_code","url","useEffect","TableBody","props","banks","banks_data","Array","map","el","index","id","compensation_code","inst_name","institution_name","invalid_bank","colSpan","LoadingSpinner","className","type","onKeyUp","event","keyCode","preventDefault","target","nextSibling","click","onClick","previousSibling","value","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAyKeA,EArKH,SAAAC,GAER,MAAyBC,qBAAzB,mBAAOC,EAAP,KAAaC,EAAb,KAGA,EAA+BF,oBAAS,GAAxC,mBAAOG,EAAP,KAAgBC,EAAhB,KAGMC,EAAc,uCAAG,WAAMN,GAAN,eAAAO,EAAA,4DACP,iDADO,SAMfF,GAAY,GANG,SASMG,MARb,kDADO,cASXC,EATW,gBAUEA,EAASC,OAVX,OAUfD,EAVe,OAWfN,EAASM,GAGTJ,GAAY,GAdG,kDAiBfM,QAAQC,IAAR,MAjBe,0DAAH,sDAsBdC,EAAa,uCAAG,WAAMC,GAAN,iBAAAP,EAAA,6DACZQ,EADY,wDAC2CD,GAD3C,SAMdT,GAAY,GANE,SASOG,MAAMO,GATb,cASVN,EATU,gBAUGA,EAASC,OAVZ,OAUdD,EAVc,OAWdN,EAASM,GAGTJ,GAAY,GAdE,kDAiBdM,QAAQC,IAAR,MAjBc,0DAAH,sDAsBnBI,qBAAU,WACNV,MACD,IAGH,IAAMW,EAAY,SAAAC,GAGd,IAGIC,EAHEC,EAAaF,EAAME,WAIzB,GAAIA,GAAcA,aAAsBC,MACpCF,EAAQC,GAAcA,EAAWE,KAAI,SAACC,EAAIC,GACtC,IAAMC,EAAKF,EAAGE,GACRX,EAAYS,EAAGG,kBACfC,EAAYJ,EAAGK,iBAErB,OACI,+BACI,6BAAKH,IACL,6BAAKX,IACL,6BAAKa,MAHAH,WAShB,GAAIJ,GAAcA,EAAWS,aAC9BV,EACI,6BACI,oBAAIW,QAAQ,IAAZ,SAAiBV,EAAWS,sBAMpC,GAAIT,EAAY,CACZ,IAAMK,EAAKL,EAAWK,GAChBX,EAAYM,EAAWM,kBACvBC,EAAYP,EAAWQ,iBAE7BT,EACI,+BACI,6BAAKM,IACL,6BAAKX,IACL,6BAAKa,MAHD,KASpB,OAAO,gCAAQR,KAIbY,EAAiB,SAAA/B,GACnB,OAAO,qBAAKgC,UAAU,kCA0B1B,OACI,gCAEI,oBAAIA,UAAU,QAAd,yBAEA,sBAAKA,UAAU,aAAf,UACI,mBAAGA,UAAU,cAAb,sDACA,uBAAOC,KAAK,SAASD,UAAU,eAAeE,QAvBpC,SAAAC,GACI,KAAlBA,EAAMC,UACND,EAAME,iBACNF,EAAMG,OAAOC,YAAYC,YAqBrB,wBAAQR,UAAU,gBAAgBS,QA9B1B,SAAAN,GAChB,IAAMrB,EAAYqB,EAAMG,OAAOI,gBAAgBC,MAC/C7B,EAAU8B,OAAS,EAAI/B,EAAcC,GAAaR,KA4B1C,oBACA,wBAAQ0B,UAAU,YAAYS,QAjBlB,SAAAN,GACpBA,EAAME,iBACiBF,EAAMG,OAAOI,gBACnBA,gBAAgBC,MAAQ,GACzCrC,KAaQ,8BAGHF,EAAW,cAAC2B,EAAD,IACR,qBAAKC,UAAU,kBAAf,SACI,wBAAOA,UAAU,QAAjB,UACI,gCACI,+BACI,oCACA,mDACA,uDAGR,cAACf,EAAD,CAAWG,WAAYlB,aC7J/C2C,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.aa22742c.chunk.js","sourcesContent":["import './App.css';\r\nimport React, { useState, useEffect } from 'react'\r\n\r\n\r\nconst App = _ => {\r\n    // Declaring a hook to store the fetched data\r\n    const [data, set_data] = useState()\r\n\r\n    // Declaring a hook for the tiny loading animation while fetching api data\r\n    const [loading, set_loading] = useState(false)\r\n\r\n    // Function to fetch api data\r\n    const get_banks_data = async _ => {\r\n        const url = 'https://revgas.herokuapp.com/revgas/api/banks/'\r\n        // const url = 'http://127.0.0.1:8000/revgas/api/banks/'\r\n\r\n        try {\r\n            // Showing the spinner while fetching\r\n            set_loading(true)\r\n\r\n            // Fetching the API and changing the state of the component\r\n            let response = await fetch(url)\r\n            response = await response.json()\r\n            set_data(response)\r\n\r\n            // Removing the spinner while fetching\r\n            set_loading(false)\r\n        }\r\n        catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    // Function to fetch the api data with a parameter\r\n    const get_bank_data = async comp_code => {\r\n        const url = `https://revgas.herokuapp.com/revgas/api/banks/${comp_code}`\r\n        // const url = `http://127.0.0.1:8000/revgas/api/banks/${comp_code}`\r\n\r\n        try {\r\n            // Showing the spinner while fetching\r\n            set_loading(true)\r\n\r\n            // Fetching the API and changing the state of the component\r\n            let response = await fetch(url)\r\n            response = await response.json()\r\n            set_data(response)\r\n\r\n            // Removing the spinner while fetching\r\n            set_loading(false)\r\n        }\r\n        catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    // Calling a function after the rendering phase\r\n    useEffect(() => {\r\n        get_banks_data()\r\n    }, [])\r\n\r\n    // Main component\r\n    const TableBody = props => {\r\n\r\n        // All bank data as props\r\n        const banks_data = props.banks_data\r\n\r\n        // Mapping the data fetched and storing it in a variable to render later\r\n        let banks\r\n        if (banks_data && banks_data instanceof Array) {\r\n            banks = banks_data && banks_data.map((el, index) => {\r\n                const id = el.id\r\n                const comp_code = el.compensation_code\r\n                const inst_name = el.institution_name\r\n\r\n                return (\r\n                    <tr key={index}>\r\n                        <td>{id}</td>\r\n                        <td>{comp_code}</td>\r\n                        <td>{inst_name}</td>\r\n                    </tr>\r\n                )\r\n            })\r\n        }\r\n        // Checking if the response has an error attribute\r\n        else if (banks_data && banks_data.invalid_bank) {\r\n            banks = (\r\n                <tr>\r\n                    <td colSpan=\"3\">{banks_data.invalid_bank}</td>\r\n                </tr>\r\n            )\r\n        }\r\n        // Saving a single bank data into an object\r\n        else {\r\n            if (banks_data) {\r\n                const id = banks_data.id\r\n                const comp_code = banks_data.compensation_code\r\n                const inst_name = banks_data.institution_name\r\n\r\n                banks = (\r\n                    <tr key=\"1\">\r\n                        <td>{id}</td>\r\n                        <td>{comp_code}</td>\r\n                        <td>{inst_name}</td>\r\n                    </tr>\r\n                )\r\n            }\r\n        }\r\n\r\n        return <tbody>{banks}</tbody>\r\n    }\r\n\r\n    // Spinner Component\r\n    const LoadingSpinner = _ => {\r\n        return <div className=\"loading loading--full-height\"></div>\r\n    }\r\n\r\n    // Function that will be executed when the user clicks on the \"search\" button\r\n    const search_bank = event => {\r\n        const comp_code = event.target.previousSibling.value\r\n        comp_code.length > 0 ? get_bank_data(comp_code) : get_banks_data()\r\n    }\r\n\r\n    // Binding the \"return\" key to trigger the \"search_bank\" function\r\n    const search_button = event => {\r\n        if (event.keyCode === 13) {\r\n            event.preventDefault()\r\n            event.target.nextSibling.click()\r\n        }\r\n    }\r\n\r\n    // Cleaning the input field and fetching the api when the \"Get all banks\" is pressed\r\n    const fetch_all_banks = event => {\r\n        event.preventDefault()\r\n        let previous_sibling = event.target.previousSibling\r\n        previous_sibling.previousSibling.value = ''\r\n        get_banks_data()\r\n    }\r\n\r\n    // Final Front end\r\n    return (\r\n        <div>\r\n\r\n            <h1 className=\"title\">Banks Index</h1>\r\n\r\n            <div className=\"search-box\">\r\n                <p className=\"search-text\">Search a bank by it's Compensation Code:</p>\r\n                <input type=\"number\" className=\"search-input\" onKeyUp={search_button} />\r\n                <button className=\"look-for-bank\" onClick={search_bank}>Search</button>\r\n                <button className=\"all-banks\" onClick={fetch_all_banks}>Get all banks</button>\r\n            </div>\r\n\r\n            {loading ? (<LoadingSpinner />) : (\r\n                <div className=\"table-container\">\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Id</th>\r\n                                <th>Compensation Code</th>\r\n                                <th>Institution name</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <TableBody banks_data={data} />\r\n                    </table>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}